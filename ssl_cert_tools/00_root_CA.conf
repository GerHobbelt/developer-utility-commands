#
# OpenSSL Moir-Brandts-Honk Ltd. configuration file.
# This is mostly being used for generation of certificate requests.
#
# See also:
#     https://www.openssl.org/docs/apps/x509v3_config.html
#     https://www.openssl.org/docs/apps/x509.html
#     

# This definition stops the following lines choking if HOME isn't
# defined.
HOME                        = .
RANDFILE                    = $ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file                    = $ENV::HOME/.oid
oid_section                 = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions                = 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1                  = 1.2.3.4
# Or use config file substitution like this:
# testoid2                  = ${testoid1}.5.6



####################################################################
[ ca ]
default_ca                  = CA_root                # The default ca section



####################################################################
[ CA_root ]

#dir                         = ./00_root_CA              # Where everything is kept
dir                         = .                         # Where everything is kept
certs                       = $dir/certs                # Where the issued certs are kept
crl_dir                     = $dir/crl                  # Where the issued crl are kept
database                    = $dir/index.txt            # database index file.

# A new one - quells a complaint from openssl ca
unique_subject              = no                        # Set to 'no' to allow creation of
                                                        # several certificates with same subject.
new_certs_dir               = $dir/newcerts             # default place for new certs.

certificate                 = $dir/cacert.pem           # The CA certificate
serial                      = $dir/serial               # The current serial number
crlnumber                   = $dir/crlnumber            # the current crl number
                                                        # must be commented out to leave a V1 CRL
crl                         = $dir/crl.pem              # The current CRL
private_key                 = $dir/private/cakey.pem    # The private key
RANDFILE                    = $dir/private/.rand        # private random number file

x509_extensions             = v3_ca                     # The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt                    = ca_default                # Subject Name options
cert_opt                    = ca_default                # Certificate field options

# Extension copying option: use with caution.
# copy_extensions           = copy
copy_extensions             = none                      # Don't copy extensions from request

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is to be commented out if you want to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
crl_extensions              = crl_ext

default_days                = 3650                      # how long to certify for
default_crl_days            = 30                        # how long before next CRL
default_md                  = sha256                    # which md to use.
preserve                    = no                        # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy                      = policy_match







# For the CA policy
[ policy_match ]
countryName                 = match
stateOrProvinceName         = match
localityName                = match
organizationName            = match
organizationalUnitName      = optional
commonName                  = supplied
emailAddress                = optional



# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName                 = optional
stateOrProvinceName         = optional
localityName                = optional
organizationName            = optional
organizationalUnitName      = optional
commonName                  = supplied
emailAddress                = optional



####################################################################
[ req ]
default_bits                = 4096
default_keyfile             = privkey.pem
distinguished_name          = req_distinguished_name
attributes                  = req_attributes
x509_extensions             = v3_ca                     # The extentions to add to the self signed cert

default_md                  = sha256                    # which md to use.

prompt                      = no

# Passwords for private keys if not present they will be prompted for
# input_password            = secret
# output_password           = secret

# This sets a mask for permitted string types. There are several options. 
# default       : PrintableString, T61String, BMPString.
# pkix          : PrintableString, BMPString.
# utf8only      : only UTF8Strings.
# nombstr       : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX       a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
string_mask                 = nombstr

#req_extensions              = v3_req                    # The extensions to add to a certificate request



[ req_distinguished_name ]
# prompt=no
 
#countryName                 = NL
C                           = NL

#stateOrProvinceName         = Zuid Holland
ST                          = Zuid Holland

#localityName                = Den Haag
L                           = Den Haag

#0.organizationName          = Moir-Brandts-Honk Ltd.
O                           = Moir-Brandts-Honk Ltd.

# we can do this but it is not needed normally :-)
#1.organizationName         = Moir-Brandts-Honk Systems Administration

#organizationalUnitName      = Security Office
OU                          = Security Office

#commonName                  = Moir-Brandts-Honk Root CA
CN                          = Moir-Brandts-Honk Root CA

emailAddress                = ger.hobbelt@mbh.com

# SET-ex3                   = SET extension number 3



[ req_attributes ]

unstructuredName            = Moir-Brandts-Honk Ltd.




[ v3_req ]

# Extensions to add to a certificate request

basicConstraints            = CA:true
keyUsage                    = nonRepudiation, digitalSignature, keyEncipherment



[ v3_ca ]

# Extensions for a self-signed root CA

# PKIX recommendation.

subjectKeyIdentifier        = hash

authorityKeyIdentifier      = keyid:always, issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints           = critical,CA:true
# So we do this instead.
basicConstraints            = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as a test self-signed certificate it is best
# left out by default.
# keyUsage                  = cRLSign, keyCertSign

# Some might want this also
# nsCertType                = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName            = email:copy
# Copy issuer details
# issuerAltName             = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj                       = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints          = critical, DER:30:03:01:01:FF



[ v3_sublevel_ca ]

# Extensions for a typical CA

# PKIX recommendation.

subjectKeyIdentifier        = hash

authorityKeyIdentifier      = keyid:always, issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints           = critical,CA:true
# So we do this instead.
basicConstraints            = CA:true

# extendedKeyUsage            = serverAuth, clientAuth, emailProtection, anyExtendedKeyUsage

# Key usage: this is typical for a CA certificate.
keyUsage                    = cRLSign, keyCertSign, digitalSignature, nonRepudiation

# Some might want this also
# nsCertType                = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName            = email:copy
# Copy issuer details
# issuerAltName             = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj                       = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints          = critical, DER:30:03:01:01:FF



[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName             = issuer:copy
authorityKeyIdentifier      = keyid:always, issuer:always

