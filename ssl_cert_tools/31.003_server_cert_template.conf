#
# OpenSSL Moir-Brandts-Honk Ltd. configuration file.
# This is mostly being used for generation of certificate requests.
#
# See also:
#     https://www.openssl.org/docs/apps/x509v3_config.html
#     https://www.openssl.org/docs/apps/x509.html
#     

# This definition stops the following lines choking if HOME isn't
# defined.
HOME                        = .
RANDFILE                    = $ENV::HOME/.rnd

# Extra OBJECT IDENTIFIER info:
#oid_file                    = $ENV::HOME/.oid
oid_section                 = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions                = 
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca' and 'req'.
# Add a simple OID like this:
# testoid1                  = 1.2.3.4
# Or use config file substitution like this:
# testoid2                  = ${testoid1}.5.6



####################################################################
[ ca ]
default_ca                  = CA_for_server             # The default ca section




####################################################################
[ CA_for_server ]

#dir                         = ./21_server_CA            # Where everything is kept
dir                         = .                         # Where everything is kept
certs                       = $dir/certs                # Where the issued certs are kept
crl_dir                     = $dir/crl                  # Where the issued crl are kept
database                    = $dir/index.txt            # database index file.

# A new one - quells a complaint from openssl ca
unique_subject              = no                        # Set to 'no' to allow creation of
                                                        # several certificates with same subject.
new_certs_dir               = $dir/newcerts             # default place for new certs.

certificate                 = $dir/cacert.pem           # The CA certificate
serial                      = $dir/serial               # The current serial number
crlnumber                   = $dir/crlnumber            # the current crl number
                                                        # must be commented out to leave a V1 CRL
crl                         = $dir/crl.pem              # The current CRL
private_key                 = $dir/private/cakey.pem    # The private key
RANDFILE                    = $dir/private/.rand        # private random number file

x509_extensions             = bulk_vhosts_server_cert   # The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt                    = ca_default                # Subject Name options
cert_opt                    = ca_default                # Certificate field options

# Extension copying option: use with caution.
copy_extensions             = copy
#copy_extensions             = none                      # Don't copy extensions from request

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is to be commented out if you want to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
crl_extensions              = crl_ext

default_days                = 365                       # how long to certify for
default_crl_days            = 30                        # how long before next CRL
default_md                  = sha256                    # which md to use.
preserve                    = no                        # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy                      = policy_match







# For the CA policy
[ policy_match ]
countryName                 = match
stateOrProvinceName         = match
localityName                = match
organizationName            = match
organizationalUnitName      = optional
commonName                  = supplied
emailAddress                = optional



# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName                 = optional
stateOrProvinceName         = optional
localityName                = optional
organizationName            = optional
organizationalUnitName      = optional
commonName                  = supplied
emailAddress                = optional



####################################################################
[ req ]
default_bits                = 2048
default_keyfile             = privkey.pem
distinguished_name          = req_distinguished_name
attributes                  = req_attributes
x509_extensions             = bulk_vhosts_server_cert                     

default_md                  = sha256                    # which md to use.

prompt                      = no

# Passwords for private keys if not present they will be prompted for
# input_password            = secret
# output_password           = secret

# This sets a mask for permitted string types. There are several options. 
# default       : PrintableString, T61String, BMPString.
# pkix          : PrintableString, BMPString.
# utf8only      : only UTF8Strings.
# nombstr       : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX       a literal mask value.
# WARNING: current versions of Netscape crash on BMPStrings or UTF8Strings
# so use this option with caution!
string_mask                 = nombstr

#req_extensions              = v3_req                    # The extensions to add to a certificate request



[ req_distinguished_name ]
# prompt=no
 
#countryName                 = NL
C                           = NL

#stateOrProvinceName         = Zuid Holland
ST                          = Zuid Holland

#localityName                = Den Haag
L                           = Den Haag

#0.organizationName          = Moir-Brandts-Honk Ltd.
O                           = Moir-Brandts-Honk Ltd.

# we can do this but it is not needed normally :-)
#1.organizationName         = Moir-Brandts-Honk Systems Administration

#organizationalUnitName      = Security Office
OU                          = Security Office

#commonName                  = Moir-Brandts-Honk Special Needs Server SNI Certificate
CN                          = Moir-Brandts-Honk Special Needs Server SNI Certificate

emailAddress                = ger.hobbelt@mbh.com

# SET-ex3                   = SET extension number 3



[ req_attributes ]

unstructuredName            = Moir-Brandts-Honk Ltd.



# subjectAltName entries
# 
# Please note: all DNS names MUST resolve to the same IP address as the FQDN.
# (We are actually much more lenient than that as we have full control over the DNS and IP
# allocation of these domains and subdomains *and* we intend to create one SAN/Wildcard SSL cert
# for all our 'Mass Virtual Host' configured Internet Facing Server nodes as well.
# In other words: we don't mind that some of these domains may point to another one of our 
# public test/demo servers as all of them will be serving the very same SAN/Wildcard certificate:
# the key point is that 'on the Internet' we will own all domains and subdomains we list in this
# SAN section, while it doesn't matter all that much on a developer local node.)
#
# SAN certificates MAY carry wildcards!
[alt_names_for_server_cert]
#DNS.1   = copy:commonName
DNS.1   = *.mbh.com
DNS.2   = *.mbh.net
DNS.3   = *.mbh.co.uk
DNS.4   = *.connectree.com
# The 2nd level domains are served elsewhere, hence they are not listed in the wildcards for this SAN cert.



# And MARK the end of the prompt=no sections' series so we can use SED to edit this entire blurb
# with ease in mk_client_cert.sh   :-)
# 
# END: [ req_distinguished_name ]




# Special section for Internet Facing Test/Demo Servers' Mass Virtual Hosting wildcard/SAN/SNI certificate creation.
[ bulk_vhosts_server_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints            = critical, CA:false

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

extendedKeyUsage            = serverAuth

# This is OK for an SSL server.
# nsCertType                = server

# For an object signing certificate this would be used.
# nsCertType                = objsign

# For normal client use this is typical
# nsCertType                = client, email

# and for everything including object signing:
# nsCertType                = client, email, objsign

# This is typical in keyUsage for a client certificate.
#keyUsage                    = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment

# This is typical in keyUsage for a webserver certificate.
# http://security.stackexchange.com/questions/26647/extensions-for-ssl-server-certificate
keyUsage                    = keyAgreement, keyEncipherment, digitalSignature
 
# This will be displayed in Netscape's comment listbox.
# nsComment                 = "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid, issuer:always

# This stuff is for subjectAltName and issuerAltname.

# Create a SAN/SNI server certificate for all server alias addresses:
subjectAltName              = @alt_names_for_server_cert

# Copy subject details
# issuerAltName             = issuer:copy

#nsCaRevocationUrl          = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName




[ v3_req ]

# Extensions to add to a certificate request

basicConstraints            = CA:false
keyUsage                    = nonRepudiation, digitalSignature, keyEncipherment




[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName             = issuer:copy
authorityKeyIdentifier      = keyid:always, issuer:always

