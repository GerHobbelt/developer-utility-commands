#
# GAWK script to extract both path and submodule URI definitions from a .gitmodules file.
#
#
# [submodule "php/lib/ultimatemysql"]
#    path = php/lib/ultimatemysql
#    url = git@github.com:GerHobbelt/ultimatemysql.git
#
# -->
#
# git submodule add  git@github.com:GerHobbelt/ultimatemysql.git  php/lib/ultimatemysql
#


BEGIN {
    printf("#\n");
    printf("# generated by generate_submodules_sync_makefile.sh\n");
    printf("#\n");
    printf("# Usage:\n");
    printf("#\n");
    printf("#     cd <base directory>\n");
    printf("#     make -f util/Makefile\n");
    printf("#\n");
    printf("# or\n");
    printf("#\n");
    printf("#     cd <base directory>\n");
    printf("#     make -f util/Makefile <target>\n");
    printf("#     \n");
    printf("# to git pull/push the addressed submodule repository/repositories\n");
    printf("#\n");
    printf("\n");
    printf("\n");
    printf("\n");

    state = 0;
    idx = 0;
}

/\[submodule/       {
    # because MSys gawk doesn't support match() with 3 arguments :-((
    split($0, a, "\"");
    submodule_path = a[2];
    #printf("Selecting path [%s]\n", submodule_path);
    next;
}

/path = /       {
    # because MSys gawk doesn't support match() with 3 arguments :-((
    split($0, a, "=");
    submodule_path = a[2];
    #printf("Selecting path [%s]\n", submodule_path);
    next;
}

/url = /        {
    # because MSys gawk doesn't support match() with 3 arguments :-((
    split($0, a, "=");
    submodule_uri = a[2];
    #printf("Selecting URI [%s]\n", submodule_uri);

    sub(/^ */, "", submodule_path);

    submodule_name = submodule_path;
    gsub(/[^a-zA-Z0-9]/, "_", submodule_name);
    sub(/^_*/, "", submodule_name);

    # see also: http://stackoverflow.com/questions/3143635/how-to-ignore-mv-error, 3rd answer
    #stmts[submodule_name] = sprintf("# repo: %s\n%s:\n\tcd %s; git pull --all; git fetch --tags; git push --all; git fsck --strict --full; GIT_ASK_YESNO=false git gc --prune --aggressive; true", submodule_uri, submodule_name, submodule_path);
    stmts[submodule_name] = sprintf("# repo: %s\n%s:\n\tcd %s; git pull --all; git fetch --tags; git push --all; GIT_ASK_YESNO=false git gc --prune --aggressive; true", submodule_uri, submodule_name, submodule_path);
    targets[submodule_name] = submodule_name;
    hash[submodule_name] = ++idx;
    #printf("# id %d: %s\n", idx, stmts[idx]);

    # also construct a 'short name' or each directory: it doesn't have to be unique but can be used instead to target a make target directly:
    p = submodule_path;
    # Windows fix, just in case
    gsub(/[\\]/, "/", p);
    split(p, a, "/");
    for (key in a) {
        short_name = a[key];
        alt_short_name = short_name;
        gsub(/[^a-zA-Z0-9]/, "_", alt_short_name);
        sub(/^_*/, "", alt_short_name);
        #printf("# id %d: key %s: name %s -- alt %s\n", idx, key, short_name, alt_short_name);

        shorthash[short_name] = 1;
        shorthash[alt_short_name] = 1;
        shorts[short_name][submodule_path] = submodule_name;
        shorts[alt_short_name][submodule_path] = submodule_name;
    }
    next;
}

            {
    next;
}

END             {
    asorti(hash);
    printf("all:\t\\\n");
    for (key in hash)
    {
        i = hash[key];
        #printf("# id %s: key %s: target %s\n", key, i, targets[i]);
        # hm... asorti seems to exchange key and index number...  :-S
        printf("\t%s\t\\\n", targets[i]);
    }
    printf("\n");
    printf("\n");
    printf("\n");
    for (key in hash)
    {
        i = hash[key];
        printf("%s\n", stmts[i]);
        printf("\n");
        printf("\n");
        printf("\n");
    }
    printf("\n");
    printf("\n");
    printf("\n");
    printf("################################################################################\n");
    printf("#\n");
    printf("# Shorthand 'alternative direct targets':\n");
    printf("#\n");
    printf("################################################################################\n");
    printf("\n");
    printf("\n");
    printf("\n");
    asorti(shorthash);
    for (key in shorthash)
    {
        i = shorthash[key];
        printf("%s:\t\\\n", i);
        for (j in shorts[i])
        {
            k = shorts[i][j];
            printf("\t%s\t\\\n", k);
        }
        printf("\n");
        printf("\n");
        printf("\n");
    }
    printf("\n");
    printf("\n");
    printf("\n");
    printf(".PHONY:\t\\\n");
    for (key in hash)
    {
        i = hash[key];
        printf("\t%s\t\\\n", targets[i]);
    }
    printf("\n");
    printf("\n");
    printf("\n");
    printf("\n");
}

