
const fs = require('fs');  
const path = require('path');

let argv = process.argv;
//console.log(argv);

let input = argv[2] || ''; 
let output = argv[3] || ''; 

if (!input.length || !fs.existsSync(input) || !output.length) {
	console.error("Node script requires 2 arguments: input file (file list) and output file (bash script to be generated).");
	process.exit(1);
}

const specialRejectFiles = [
	".git",
	".gitignore",
	".gitmodules",
	".gitattributes",
	"README",
	"README.txt",
	"README.md",
	"index.html",
	"Makefile",
	"Makefile.am",
	"Makefile.in",
	"configure",
	"configure.ac",
	"App.config",
	"CHANGES",
	"LICENSE",
	"LICENSE.txt",
	"LICENSE.md",
];

let src = fs.readFileSync(input, 'utf8');
// split in lines, one line per file
let a = src.split('\n');
// process each line:
let uniq = {};
let b = a
.filter((l) => l && l.length)
.map((l) => {
	l = l.replace(/[\\/]/g, '/');

	let has_build_dir = false;
	// see if directory tree includes the 'node_modules' dir or other obvious build destination directory:
	if (l.includes('/node_modules/')) {
		// strip down to the first 'node_modules' in this dir: those can be nested and we want to kill the base install dir.
		has_build_dir = true;
		l = l.replace(/\/node_modules\/.*$/, '/node_modules/');
	}
	else if (l.endsWith('/node_modules')) {
		// strip down to the first 'node_modules' in this dir: those can be nested and we want to kill the base install dir.
		has_build_dir = true;
		l = l.replace(/\/node_modules\/.*$/, '/node_modules/');
		l = l.replace(/\/node_modules$/, '/node_modules/');
	}
	else {
		// node_modules in this path: skip it!
	}
	
	if (!has_build_dir) {
		console.error('Could not deduce a npm node_modules install directory for this path:', l);
		return null;
	}

	// make sure we log each entry only once:
	if (uniq[l])
		return null;
	uniq[l] = true;
	return l;
})
.filter((l) => l && l.length);

let dstcontent = b.map((l) => {
	return `echo "${l}"
rm -rf "${l}"`;
})

fs.writeFileSync(output, `#! /bin/bash

echo "Deleting each build directory:"

${ dstcontent.join('\n') }

	`, 'utf8');

